[project]
name = "docsrs-mcp"
version = "0.1.0"
description = "MCP server for querying Rust crate documentation with vector search"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Peter Kloiber", email = "peter@example.com"}
]
keywords = ["mcp", "rust", "documentation", "vector-search", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.111",
    "uvicorn[standard]>=0.30",
    "aiohttp==3.9.5",
    "orjson>=3.9",
    "zstandard>=0.22",
    "slowapi>=0.1",
    "pydantic>=2.0",
    "sqlite-vec>=0.1.6",
    "aiosqlite>=0.21.0",
    "fastembed<0.7.0",
    "ijson>=3.2",
    "tenacity>=8.0",
    "fastmcp==2.11.1",
    "psutil>=7.0.0",
    "pygments>=2.19.2",
    "rapidfuzz>=3.5.2,<3.9.0",
    "msgpack>=1.1.1",
    "filelock>=3.18.0",
    "structlog>=24.1.0",
    "tiktoken>=0.11.0",
]

[project.scripts]
docsrs-mcp = "docsrs_mcp.cli:main"

[project.urls]
Homepage = "https://github.com/RimoVR/docsrs-mcp"
Documentation = "https://github.com/RimoVR/docsrs-mcp/blob/main/README.md"
Repository = "https://github.com/RimoVR/docsrs-mcp.git"
Issues = "https://github.com/RimoVR/docsrs-mcp/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.2",
    "pytest-cov>=4.0",
    "httpx>=0.24",
    "ruff>=0.1.0",
    "hypothesis>=6.0",
]

[tool.ruff]
# Ruff configuration - single tool for linting and formatting
target-version = "py310"
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "PIE",    # flake8-pie
    "PL",     # pylint
    "NPY",    # NumPy-specific rules
    "ASYNC",  # flake8-async
]
ignore = [
    "E501",   # line-too-long (handled by formatter)
    "PLR0913", # too-many-arguments
    "PLR2004", # magic-value-comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "PLR2004"]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["docsrs_mcp"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["docsrs_mcp"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
