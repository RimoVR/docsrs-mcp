I will start by examining the files to confirm the analysis and then propose the necessary changes. I'll begin with the Pydantic models and the cross-reference service.
Based on the analysis, I will now apply the necessary code modifications to align the Pydantic models with the service layer and ensure the tests pass.

First, I'll update the data models in `src/docsrs_mcp/models/cross_references.py`.Acknowledged. I am in a read-only environment and cannot apply file modifications directly. As requested, here is the patch to fix the schema validation issue, along with implementation notes.

### Implementation Notes

The following changes address the Pydantic schema mismatch and service layer inconsistencies:

1.  **`src/docsrs_mcp/models/cross_references.py`**:
    *   **`MigrationSuggestion`**: Added an optional `notes: str | None` field to accommodate the migration guidance generated by the service. The `old_path` and `new_path` fields are now optional (`str | None`) to correctly handle cases where a database query returns `NULL` (e.g., for 'added' or 'removed' changes).
    *   **`ImportAlternative`**: Added an optional `alias: str | None` field to prevent validation errors when the `resolve_import` service includes an alias in its response.

2.  **`src/docsrs_mcp/services/cross_reference_service.py`**:
    *   **`suggest_migrations`**:
        *   The method's return type was changed from `MigrationSuggestionsResponse` to `list[dict]` to align with test expectations.
        *   It now converts `MigrationSuggestion` model instances to dictionaries using `.model_dump()` before returning them.
    *   **`_generate_migration_notes`**: Implemented this missing helper method to generate descriptive notes for each migration suggestion based on the change type.
    *   **`_get_pattern_based_suggestions`**: Implemented this missing `async` helper, which acts as a wrapper around the existing synchronous `_pattern_based_migrations` method. This fixes the `AttributeError` that occurred during the fallback logic.

These changes ensure that the service layer produces data in the shape expected by both the API handlers (which wrap results in Pydantic models) and the test suite, resolving the `ValidationError` and `AttributeError` bugs.

---

### Patch

Here are the changes in diff format that you can apply.

**`src/docsrs_mcp/models/cross_references.py`**

```diff
--- a/src/docsrs_mcp/models/cross_references.py
+++ b/src/docsrs_mcp/models/cross_references.py
@@ -13,6 +13,7 @@
     path: str = Field(..., description="Alternative import path")
     confidence: float = Field(..., description="Confidence score (0.0-1.0)")
     link_type: str = Field(..., validation_alias=AliasChoices("link_type", "type"), serialization_alias="link_type", description="Type of link (reexport, crossref, etc.)")
+    alias: str | None = Field(None, description="Alias path if re-exported")
 
     model_config = strict_config
 
@@ -55,12 +56,13 @@
 class MigrationSuggestion(BaseModel):
     """Suggestion for migrating between versions."""
 
-    old_path: str = Field(..., description="Path in old version")
-    new_path: str = Field(..., description="Path in new version")
+    old_path: str | None = Field(..., description="Path in old version")
+    new_path: str | None = Field(..., description="Path in new version")
     change_type: str = Field(
         ..., description="Type of change (renamed, moved, removed, added)"
     )
     confidence: float = Field(..., description="Suggestion confidence (0.0-1.0)")
+    notes: str | None = Field(None, description="Additional migration guidance")
 
     model_config = strict_config
 

```

**`src/docsrs_mcp/services/cross_reference_service.py`**

```diff
--- a/src/docsrs_mcp/services/cross_reference_service.py
+++ b/src/docsrs_mcp/services/cross_reference_service.py
@@ -342,16 +342,16 @@
 
     async def suggest_migrations(
         self, crate_name: str, from_version: str, to_version: str
-    ) -> MigrationSuggestionsResponse:
+    ) -> list[dict]:
         """Suggest migration paths between versions.
-        
+
         Args:
             crate_name: Name of the crate
             from_version: Source version
             to_version: Target version
-            
+
         Returns:
-            Migration suggestions with confidence scores
+            A list of migration suggestion dictionaries.
         """
         suggestions = []
         
@@ -420,22 +420,41 @@
                         new_path=new_path,
                         change_type=change_type,
                         confidence=confidence,
-                        notes=self._generate_migration_notes(change_type, old_path, new_path)
+                        notes=self._generate_migration_notes(
+                            change_type, old_path, new_path
+                        ),
                     )
-                    suggestions.append(suggestion)
+                    suggestions.append(suggestion.model_dump())
                     
             except Exception as e:
                 logger.warning(f"Database query failed, using pattern-based fallback: {e}")
                 # Fallback to pattern-based suggestions
                 suggestions = await self._get_pattern_based_suggestions(
                     crate_name, from_version, to_version
                 )
-        
-        return MigrationSuggestionsResponse(
-            crate_name=crate_name,
-            from_version=from_version,
-            to_version=to_version,
-            suggestions=suggestions
-        )
+
+        return suggestions
+
+    def _generate_migration_notes(
+        self, change_type: str, old_path: str | None, new_path: str | None
+    ) -> str:
+        """Generate helpful notes for a migration suggestion."""
+        if change_type == "removed":
+            return f"The item `{old_path}` was removed. Consider finding a replacement or removing its usage."
+        if change_type == "added":
+            return f"A new item `{new_path}` was added. You may be able to use it."
+        if change_type == "renamed" or change_type == "moved":
+            return f"The item `{old_path}` was moved or renamed to `{new_path}`. Update your import paths."
+        if change_type == "modified":
+            return f"The signature of `{old_path}` has changed. Please review the new API."
+        return "A change was detected, please review."
+
+    async def _get_pattern_based_suggestions(
+        self, crate_name: str, from_version: str, to_version: str
+    ) -> list[dict]:
+        """Async wrapper for pattern-based migration suggestions."""
+        return self._pattern_based_migrations(crate_name, from_version, to_version)
 
     def _pattern_based_migrations(
         self, crate_name: str, from_version: str, to_version: str

```
